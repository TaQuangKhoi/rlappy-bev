name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Required to create releases and upload assets

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: rlappy-bev.exe
            asset_name: rlappy-bev-windows-x86_64.exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: rlappy-bev
            asset_name: rlappy-bev-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: rlappy-bev
            asset_name: rlappy-bev-macos-x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: true            # ⬅️ kéo file LFS thay vì chỉ pointer

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libx11-dev libasound2-dev libudev-dev

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare release package
        shell: bash
        run: |
          # Create release directory
          mkdir -p release-package
          
          # Copy binary
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp ${{ matrix.binary_name }} ../../../release-package/
          else
            cp ${{ matrix.binary_name }} ../../../release-package/
            chmod +x ../../../release-package/${{ matrix.binary_name }}
          fi
          cd ../../..
          
          # Copy assets directory
          cp -r assets release-package/
          
          # Create ZIP archive
          cd release-package
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../rlappy-bev-${{ matrix.target }}.zip *
          else
            zip -r ../rlappy-bev-${{ matrix.target }}.zip *
          fi
          cd ..

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./rlappy-bev-${{ matrix.target }}.zip
          asset_name: rlappy-bev-${{ matrix.target }}.zip
          asset_content_type: application/zip
